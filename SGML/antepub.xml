<?xml version="1.0" encoding="utf-8"?>
<project basedir="." default="dist" name="testtei">
  <!--
	This library is free software; you can redistribute it and/or
	modify it under the terms of the GNU Lesser General Public
	License as published by the Free Software Foundation; either
	version 2.1 of the License, or (at your option) any later version.
	
	This library is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	Lesser General Public License for more details.
	
	You should have received a copy of the GNU Lesser General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
	
        Id: $Id: build-to.xml 9887 2011-12-04 22:52:05Z rahtz $
        Copyright: 2011, TEI Consortium<
-->
  <property name="oddFile" value=""/>
  <property name="outputname" value=""/>
  <property name="testfile" value=""/>
  <property name="testfile2" value=""/>
  <property name="profile" value="default"/>
  <property name="lang" value="en"/>
  <property name="patternprefix" value="tei_"/>
  <property name="saxon" value="/usr/share/saxon/saxon9he.jar"/>
  <property name="trang" value="/usr/share/trang/trang.jar"/>
  <property name="jing" value="/usr/share/java/jing.jar"/>
  <property name="XSL" value="../../Stylesheets"/>
  <property name="odd2dtd" value="${XSL}/profiles/${profile}/dtd/to.xsl"/>
  <property name="odd2html" value="${XSL}/odds2/odd2html.xsl"/>
  <property name="odd2lite" value="${XSL}/odds2/odd2lite.xsl"/>
  <property name="lite2latex" value="${XSL}/profiles/${profile}/latex/to.xsl"/>
  <property name="odd2relax" value="${XSL}/profiles/${profile}/relaxng/to.xsl"/>
  <property name="odd2odd" value="${XSL}/odds2/odd2odd.xsl"/>
  <property name="odd2isosch" value="${XSL}/odds2/extract-isosch.xsl"/>
  <property name="teitoepub"  value="${XSL}/profiles/${profile}/epub/to.xsl"/>
  <property name="listgraphics" value="${XSL}/tools/makegraphicsanttask.xsl"/>
  <dirname property="inputDir" file="${oddFile}"/>
  <property name="outputTempDir" value="${inputDir}/temp-dir-for-ant"/>

  <path id="classpath">
    <pathelement path="${java.class.path}"/>
  </path>
  <taskdef name="runjing" classpath="${jing}" classname="com.thaiopensource.relaxng.util.JingTask"/>
  <target name="dist" depends="setup,validateodd,compileodd,dtd,rng,rnc,xsd,validaterng,isoschematron,validateschematron,dochtml,cleanup"/>
  <target name="setup">
  </target>
  <target name="validaterng">
    <echo level="info">Validate ${testfile} against RELAXNG ${outputname}.rng</echo>
    <runjing rngfile="${outputname}.rng" file="${testfile}"/>
  </target>
  <target name="docepub" depends="compileodd">
    <!-- The transformation for EPUB output. -->
    <echo level="info">XSLT generate ePub ${outputname}.doc.epub</echo>
    <xslt force="yes" style="${teitoepub}" in="${outputname}.odd.compiled" out="${outputTempDir}/OPS/index.html">
      <xmlcatalog>
        <catalogpath>
          <pathelement location="../../../../catalog.xml"/>
          <pathelement location="../../../../../xhtml11/dtd/xhtmlcatalog.xml"/>
        </catalogpath>
      </xmlcatalog>
      <factory name="net.sf.saxon.TransformerFactoryImpl"/>
      <param name="directory" expression="file:///${outputTempDir}"/>
      <param name="inputDir" expression="${inputFileDir}/"/>
      <param name="fixgraphicsurl" expression="true"/>
      <param name="summaryDoc"  expression="true"/>
      <!-- supply unique URN for ebook-->
      <param name="uid" expression="${uid}" if="uid"/>
      <!-- set splitting level-->
      <param name="splitLevel" expression="${splitLevel}" if="splitLevel"/>
      <!-- supply name of publisher for ebook-->
      <param name="publisher" expression="${publisher}" if="publisher"/>
      <!-- supply subject/category for ebook-->
      <param name="subject" expression="${subject}" if="subject"/>
      <!-- supply name of JPEG file for ebook cover-->
      <param name="coverimage" expression="${coverimage}" if="coverimage"/>
      <!-- supply name of CSS file-->
      <param name="cssFile" expression="${cssFile}" if="cssFile"/>
      <!-- name of media overlay file -->
      <param name="mediaoverlay" expression="${mediaoverlay}" if="mediaoverlay"/>
      <!-- file per page -->
      <param name="filePerPage" expression="${filePerPage}" if="filePerPage"/>
      <!-- epub viewport -->
      <param name="viewPortHeight" expression="${viewPortHeight}" if="viewPortHeight"/>
      <param name="viewPortWidth" expression="${viewPortWidth}" if="viewPortWidth"/>
      <!-- supply name of language-->
      <param name="lang" expression="${lang}" if="lang"/>
      <!-- emit some diagnostics"-->
      <param name="debug" expression="${debug}" if="debug"/>
      <!-- be verbose-->
      <param name="verbose" expression="${verbose}" if="verbose"/>
      <!-- disable compression on the output ZIP -->
      <param name="nocompress" expression="${nocompress}" if="nocompress"/>
    </xslt>
    <echo level="info">Get names of graphics files and write an ant task</echo>
    <xslt force="yes" style="${listgraphics}" in="${outputname}.odd.compiled" out="${outputTempDir}/copy.xml">
      <xmlcatalog>
        <catalogpath>
          <pathelement location="../../../../catalog.xml"/>
          <pathelement location="../../../../../xhtml11/dtd/xhtmlcatalog.xml"/>
        </catalogpath>
      </xmlcatalog>
      <factory name="net.sf.saxon.TransformerFactoryImpl"/>
      <param name="inputDir" expression="${inputFileDir}"/>
      <param name="mediaDir" expression="OPS/media"/>
      <param name="mediaoverlay" expression="${mediaoverlay}" if="mediaoverlay"/>
      <param name="filePerPage" expression="${filePerPage}" if="filePerPage"/>
    </xslt>
    <echo level="info">Copy image files</echo>
    <ant antfile="${outputTempDir}/copy.xml"/>
    <echo level="info">ZIP: put files from ${outputTempDir} together into ${outputname}.doc.epub</echo>
    <delete file="${outputname}.doc.epub"/>
    <zip destfile="${outputname}.doc.epub" basedir="${outputTempDir}"
	 compress="true" excludes="mimetype,tmp1.xml,tmp2.xml,copy.xml"/>
    <zip destfile="${outputname}.doc.epub" basedir="${outputTempDir}" includes="mimetype" update="true" keepcompression="true" compress="false"/>
  </target>

  <target name="cleanup" unless="debug">
    <delete file="${outputname}.odd.compiled"/>
    <delete dir="${outputTempDir}"/>
  </target>

</project>

